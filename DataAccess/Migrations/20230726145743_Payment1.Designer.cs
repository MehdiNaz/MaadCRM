// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(MaadContext))]
    [Migration("20230726145743_Payment1")]
    partial class Payment1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Models.Businesses.Business", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(26)");

                    b.Property<string>("BusinessName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("CompanyAddress")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateLastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Hosts")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("StatusTypeBusiness")
                        .HasColumnType("integer");

                    b.Property<string>("Url")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Businesses", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Businesses.Pardakhts.Pardakht", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(26)");

                    b.Property<decimal?>("AmountReturned")
                        .HasColumnType("numeric");

                    b.Property<string>("BankMessage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DarandeHesab")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateLastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DatePay")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateReturned")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DescriptionReturned")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdBusiness")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<string>("IdUser")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdUserAdded")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdUserUpdated")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte>("PaymentMethod")
                        .HasColumnType("smallint");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PriceDiscount")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PriceTotal")
                        .HasColumnType("numeric");

                    b.Property<string>("RefNum")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShomarePeygiri")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("IdBusiness");

                    b.HasIndex("IdUser");

                    b.HasIndex("IdUserAdded");

                    b.HasIndex("IdUserUpdated");

                    b.ToTable("Pardakht", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Businesses.Pardakhts.PardakhtTakhfif", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(26)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateLastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IdPardakht")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<string>("IdTakhfif")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<string>("IdUserAdded")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdUserUpdated")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("IdPardakht");

                    b.HasIndex("IdTakhfif");

                    b.HasIndex("IdUserAdded");

                    b.HasIndex("IdUserUpdated");

                    b.ToTable("PardakhtTakhfif", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Businesses.Pardakhts.Takhfif", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(26)");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateEnded")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateLastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateStarted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IdBusiness")
                        .HasColumnType("character varying(26)");

                    b.Property<string>("IdUserAdded")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdUserUpdated")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool?>("IsUsed")
                        .HasColumnType("boolean");

                    b.Property<long?>("MaxCountCanBeUsed")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<byte?>("Percent")
                        .HasColumnType("smallint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("IdUserAdded");

                    b.HasIndex("IdUserUpdated");

                    b.ToTable("Takhfif", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Businesses.Plans.BusinessPlan", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(26)");

                    b.Property<long>("CountOfDay")
                        .HasColumnType("bigint");

                    b.Property<long>("CountOfUsers")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateFinished")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateLastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateStarted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IdBusiness")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<string>("IdPardakht")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<string>("IdPlan")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<string>("IdUser")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdUserAdded")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdUserUpdated")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("IdBusiness");

                    b.HasIndex("IdPardakht");

                    b.HasIndex("IdPlan");

                    b.HasIndex("IdUser");

                    b.HasIndex("IdUserAdded");

                    b.HasIndex("IdUserUpdated");

                    b.ToTable("BusinessPlan", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Businesses.Plans.Plan", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(26)");

                    b.Property<long>("CountOfDay")
                        .HasColumnType("bigint");

                    b.Property<long>("CountOfUsers")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateLastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IdUserAdded")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdUserUpdated")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("MaxUser")
                        .HasColumnType("bigint");

                    b.Property<long>("MinUser")
                        .HasColumnType("bigint");

                    b.Property<decimal>("PriceOfEachDay")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PriceOfEachUsers")
                        .HasColumnType("numeric");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("IdUserAdded");

                    b.HasIndex("IdUserUpdated");

                    b.ToTable("Plans", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Contacts.Contact", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(26)");

                    b.Property<string>("BusinessId")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<string>("ContactGroupId")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<int>("ContactStatusType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateLastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EmailId")
                        .HasColumnType("character varying(26)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Job")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("MobileNumberId")
                        .HasColumnType("character varying(26)");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ContactGroupId");

                    b.ToTable("Contacts", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Contacts.ContactGroup", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(26)");

                    b.Property<string>("BusinessId")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<int>("ContactGroupStatusType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateLastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("ContactGroups", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Contacts.ContactPhoneNumber", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(26)");

                    b.Property<string>("ContactId")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<int>("ContactPhoneNumberStatusType")
                        .HasColumnType("integer");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateLastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PhoneNo")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)");

                    b.Property<int>("PhoneType")
                        .HasColumnType("integer");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.ToTable("ContactPhoneNumbers", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Contacts.ContactsEmailAddress", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(26)");

                    b.Property<string>("ContactEmailAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ContactId")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<int>("ContactsEmailAddressStatusType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateLastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.ToTable("ContactsEmailAddress", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Customers.Customer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(26)");

                    b.Property<DateOnly?>("BirthDayDate")
                        .HasColumnType("date");

                    b.Property<int>("CustomerActivationStatus")
                        .HasColumnType("integer");

                    b.Property<byte[]>("CustomerPic")
                        .HasColumnType("bytea");

                    b.Property<int>("CustomerState")
                        .HasColumnType("integer");

                    b.Property<int>("CustomerStatusType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateLastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FirstName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<byte?>("Gender")
                        .HasColumnType("smallint");

                    b.Property<string>("IdCity")
                        .HasColumnType("character varying(26)");

                    b.Property<string>("IdMoaref")
                        .HasColumnType("character varying(26)");

                    b.Property<string>("IdUser")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdUserAdded")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdUserUpdated")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("IdCity");

                    b.HasIndex("IdMoaref");

                    b.HasIndex("IdUser");

                    b.HasIndex("IdUserAdded");

                    b.HasIndex("IdUserUpdated");

                    b.ToTable("Customers", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Customers.CustomerActivity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(26)");

                    b.Property<string>("CustomerActivityDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CustomerActivityName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CustomerActivityStatusType")
                        .HasColumnType("integer");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateLastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("CustomerActivities");
                });

            modelBuilder.Entity("Domain.Models.Customers.CustomerAddress", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(26)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("CodePost")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateLastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("IdCustomer")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<string>("PhoneNo")
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)");

                    b.Property<int>("StatusTypeCustomersAddress")
                        .HasColumnType("integer");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("IdCustomer");

                    b.ToTable("CustomerAddresses", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Customers.CustomersEmailAddress", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(26)");

                    b.Property<string>("CustomerEmailAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateLastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IdCustomer")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<int>("StatusTypeCustomerEmailAddress")
                        .HasColumnType("integer");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("IdCustomer");

                    b.ToTable("EmailAddresses", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Customers.CustomersPhoneNumber", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(26)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateLastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IdCustomer")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<string>("PhoneNo")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)");

                    b.Property<int>("PhoneType")
                        .HasColumnType("integer");

                    b.Property<int>("StatusTypeCustomersPhoneNumber")
                        .HasColumnType("integer");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("IdCustomer");

                    b.ToTable("PhoneNumbers", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Customers.FeedBack.CustomerFeedback", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(26)");

                    b.Property<int>("CustomerFeedbackStatusType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateLastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("IdCategory")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<string>("IdCustomer")
                        .HasColumnType("character varying(26)");

                    b.Property<string>("IdProduct")
                        .HasColumnType("character varying(26)");

                    b.Property<string>("IdUser")
                        .HasColumnType("text");

                    b.Property<string>("IdUserAdded")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdUserUpdated")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("IdCategory");

                    b.HasIndex("IdCustomer");

                    b.HasIndex("IdProduct");

                    b.HasIndex("IdUser");

                    b.HasIndex("IdUserAdded");

                    b.HasIndex("IdUserUpdated");

                    b.ToTable("CustomerFeedbacks", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Customers.FeedBack.CustomerFeedbackAttachment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(26)");

                    b.Property<int>("CustomerFeedbackAttachmentStatusType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateLastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Extenstion")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<byte[]>("FileName")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("IdCustomerFeedback")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("IdCustomerFeedback");

                    b.ToTable("CustomerFeedbackAttachments", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Customers.FeedBack.CustomerFeedbackCategory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(26)");

                    b.Property<int>("CustomerFeedbackCategoryStatusType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateLastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IdBusiness")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<string>("IdUserAdded")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdUserUpdated")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("PositiveNegative")
                        .HasColumnType("boolean");

                    b.Property<int>("TypeFeedback")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("IdBusiness");

                    b.HasIndex("IdUserAdded");

                    b.HasIndex("IdUserUpdated");

                    b.HasIndex("UserId");

                    b.ToTable("CustomerFeedbackCategories", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Customers.Foroosh.ForooshFactor", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(26)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<decimal>("AmountDiscount")
                        .HasColumnType("numeric");

                    b.Property<decimal>("AmountTax")
                        .HasColumnType("numeric");

                    b.Property<decimal>("AmountTotal")
                        .HasColumnType("numeric");

                    b.Property<long?>("BazeyeZamany")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("DarSadeSoud")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateLastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DatePayed")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IdCustomer")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<string>("IdCustomerAddress")
                        .HasColumnType("character varying(26)");

                    b.Property<string>("IdUserAdded")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdUserUpdated")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal?>("MablagheKoleSoud")
                        .HasColumnType("numeric");

                    b.Property<byte>("PaymentMethod")
                        .HasColumnType("smallint");

                    b.Property<decimal?>("PishPardakht")
                        .HasColumnType("numeric");

                    b.Property<int?>("ShippingMethodType")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ShoroAghsat")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("StatusTypeForooshFactor")
                        .HasColumnType("integer");

                    b.Property<long?>("TedadeAghsat")
                        .HasColumnType("bigint");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("IdCustomer");

                    b.HasIndex("IdCustomerAddress");

                    b.HasIndex("IdUserAdded");

                    b.HasIndex("IdUserUpdated");

                    b.ToTable("ForooshFactors", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Customers.Foroosh.ForooshOrder", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(26)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateLastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IdForooshFactor")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<string>("IdProduct")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<string>("IdUserAdded")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdUserUpdated")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PriceDiscount")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PriceShipping")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PriceTotal")
                        .HasColumnType("numeric");

                    b.Property<int>("StatusTypeForooshOrder")
                        .HasColumnType("integer");

                    b.Property<long>("Tedad")
                        .HasColumnType("bigint");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("IdForooshFactor");

                    b.HasIndex("IdProduct");

                    b.HasIndex("IdUserAdded");

                    b.HasIndex("IdUserUpdated");

                    b.ToTable("ForooshOrders", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Customers.Foroosh.ForooshPayment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(26)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateLastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DatePay")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IdForooshFactor")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<decimal>("PaymentAmount")
                        .HasColumnType("numeric");

                    b.Property<int>("PaymentStatusType")
                        .HasColumnType("integer");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("IdForooshFactor");

                    b.ToTable("Payments", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Customers.Notes.CustomerNote", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(26)");

                    b.Property<int>("CustomerNoteStatusType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateLastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdCustomer")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<string>("IdProduct")
                        .HasColumnType("character varying(26)");

                    b.Property<string>("IdUserAdded")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdUserUpdated")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("IdCustomer");

                    b.HasIndex("IdProduct");

                    b.HasIndex("IdUserAdded");

                    b.HasIndex("IdUserUpdated");

                    b.ToTable("CustomerNotes", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Customers.Notes.CustomerNoteAttachment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(26)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateLastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Extenstion")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<byte[]>("FileName")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("IdCustomerNote")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<int>("NoteAttachmentStatusType")
                        .HasColumnType("integer");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("IdCustomerNote");

                    b.ToTable("NoteAttachments", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Customers.Notes.CustomerNoteHashTable", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(26)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateLastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IdBusiness")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<int>("NoteHashTagStatusType")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("IdBusiness");

                    b.ToTable("NoteHashTables", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Customers.Notes.CustomerNoteHashTag", b =>
                {
                    b.Property<string>("IdCustomerNote")
                        .HasColumnType("character varying(26)");

                    b.Property<string>("IdNoteHashTable")
                        .HasColumnType("character varying(26)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateLastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Id")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<string>("IdCustomerNoteNavigationId")
                        .HasColumnType("character varying(26)");

                    b.Property<int>("StatusTypeNoteHashTag")
                        .HasColumnType("integer");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("IdCustomerNote", "IdNoteHashTable");

                    b.HasIndex("IdCustomerNoteNavigationId");

                    b.HasIndex("IdNoteHashTable");

                    b.ToTable("NoteHashTags", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Customers.PeyGiry.CustomerPeyGiry", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(26)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateLastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DatePeyGiry")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("IdCustomer")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<string>("IdPeyGiryCategory")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<string>("IdUser")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdUserAdded")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdUserUpdated")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PeyGiryStatus")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("IdCustomer");

                    b.HasIndex("IdPeyGiryCategory");

                    b.HasIndex("IdUser");

                    b.HasIndex("IdUserAdded");

                    b.HasIndex("IdUserUpdated");

                    b.ToTable("CustomerPeyGiries", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Customers.PeyGiry.PeyGiryAttachment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(26)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateLastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Extenstion")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<byte[]>("FileName")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("IdPeyGiry")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<int>("StatusTypePeyGiryAttachment")
                        .HasColumnType("integer");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("IdPeyGiry");

                    b.ToTable("PeyGiryAttachments", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Customers.PeyGiry.PeyGiryCategory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(26)");

                    b.Property<string>("BusinessId")
                        .HasColumnType("character varying(26)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateLastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IdUser")
                        .HasColumnType("text");

                    b.Property<string>("IdUserAdded")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdUserUpdated")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Kind")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.HasIndex("IdUser");

                    b.HasIndex("IdUserAdded");

                    b.HasIndex("IdUserUpdated");

                    b.ToTable("PeyGiryCategories", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Customers.ProductCustomerFavoritesList", b =>
                {
                    b.Property<string>("IdProduct")
                        .HasColumnType("character varying(26)");

                    b.Property<string>("IdCustomer")
                        .HasColumnType("character varying(26)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateLastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("StatusTypeProductCustomerFavoritesList")
                        .HasColumnType("integer");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("IdProduct", "IdCustomer");

                    b.HasIndex("IdCustomer");

                    b.ToTable("ProductCustomerFavoritesLists", (string)null);
                });

            modelBuilder.Entity("Domain.Models.IdentityModels.UserGroup", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(26)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateLastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<string>("IdBusiness")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<string>("IdUserAdded")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdUserUpdated")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("IdBusiness");

                    b.HasIndex("IdUserAdded");

                    b.HasIndex("IdUserUpdated");

                    b.ToTable("UserGroups", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Location.City", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(26)");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CityStatusType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateLastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("DisplayOrder")
                        .HasColumnType("bigint");

                    b.Property<string>("IdProvince")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("IdProvince");

                    b.ToTable("Cities", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Location.Country", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(26)");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("CountryStatusType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateLastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("DisplayOrder")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Countries", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Location.Province", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(26)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateLastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("DisplayOrder")
                        .HasColumnType("bigint");

                    b.Property<string>("IdCountry")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<string>("ProvinceName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("ProvinceStatusType")
                        .HasColumnType("integer");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("IdCountry");

                    b.ToTable("Provinces", (string)null);
                });

            modelBuilder.Entity("Domain.Models.LogsUser.Log", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(26)");

                    b.Property<string>("CustomerId")
                        .HasColumnType("character varying(26)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateLastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("FeedBackId")
                        .HasColumnType("character varying(26)");

                    b.Property<string>("ForooshFactorId")
                        .HasColumnType("character varying(26)");

                    b.Property<string>("ForooshId")
                        .HasColumnType("character varying(26)");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NoteId")
                        .HasColumnType("character varying(26)");

                    b.Property<string>("PeyGiryId")
                        .HasColumnType("character varying(26)");

                    b.Property<string>("ProductCategoryId")
                        .HasColumnType("character varying(26)");

                    b.Property<string>("ProductId")
                        .HasColumnType("character varying(26)");

                    b.Property<byte>("Type")
                        .HasColumnType("smallint");

                    b.Property<string>("UserAgent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("FeedBackId");

                    b.HasIndex("ForooshFactorId");

                    b.HasIndex("NoteId");

                    b.HasIndex("PeyGiryId");

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("Domain.Models.Notifications.Notif", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(26)");

                    b.Property<DateTime>("DateAlarm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateDue")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateLastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("IdPeyGiry")
                        .HasColumnType("character varying(26)");

                    b.Property<string>("IdUser")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdUserAdded")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdUserUpdated")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NotificationType")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("IdPeyGiry");

                    b.HasIndex("IdUser");

                    b.HasIndex("IdUserAdded");

                    b.HasIndex("IdUserUpdated");

                    b.ToTable("Notifications", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Products.Product", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(26)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateLastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("numeric");

                    b.Property<byte?>("DiscountPercent")
                        .HasColumnType("smallint");

                    b.Property<string>("IdProductCategory")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<string>("IdUserAddNavigationId")
                        .HasColumnType("text");

                    b.Property<string>("IdUserAdded")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdUserUpdateNavigationId")
                        .HasColumnType("text");

                    b.Property<string>("IdUserUpdated")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("Picture")
                        .HasColumnType("bytea");

                    b.Property<decimal?>("Price")
                        .HasColumnType("numeric");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<decimal?>("SecondaryPrice")
                        .HasColumnType("numeric");

                    b.Property<byte>("StatusPublish")
                        .HasColumnType("smallint");

                    b.Property<int>("StatusTypeProduct")
                        .HasColumnType("integer");

                    b.Property<string>("Summery")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("IdProductCategory");

                    b.HasIndex("IdUserAddNavigationId");

                    b.HasIndex("IdUserUpdateNavigationId");

                    b.ToTable("Products", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Products.ProductCategory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(26)");

                    b.Property<string>("BusinessId")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateLastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Icon")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("IdUserAddNavigationId")
                        .HasColumnType("text");

                    b.Property<string>("IdUserAdded")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdUserUpdateNavigationId")
                        .HasColumnType("text");

                    b.Property<string>("IdUserUpdated")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte?>("Order")
                        .HasColumnType("smallint");

                    b.Property<string>("ProductCategoryName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("ProductCategoryStatusType")
                        .HasColumnType("integer");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.HasIndex("IdUserAddNavigationId");

                    b.HasIndex("IdUserUpdateNavigationId");

                    b.ToTable("ProductCategories", (string)null);
                });

            modelBuilder.Entity("Domain.Models.SpecialFields.Attribute", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(26)");

                    b.Property<byte>("AttributeInputTypeId")
                        .HasColumnType("smallint");

                    b.Property<byte>("AttributeTypeId")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateLastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DefaultValue")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<string>("IdBusiness")
                        .HasColumnType("character varying(26)");

                    b.Property<string>("IdUserAdded")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdUserUpdated")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("ValidationFileAllowExtension")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("ValidationFileMaximumSize")
                        .HasColumnType("integer");

                    b.Property<int?>("ValidationMaxLength")
                        .HasColumnType("integer");

                    b.Property<int?>("ValidationMinLength")
                        .HasColumnType("integer");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("IdBusiness");

                    b.HasIndex("IdUserAdded");

                    b.HasIndex("IdUserUpdated");

                    b.ToTable("Attributes", (string)null);
                });

            modelBuilder.Entity("Domain.Models.SpecialFields.AttributeCustomer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(26)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateLastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FilePath")
                        .HasColumnType("text");

                    b.Property<string>("IdAttributeOption")
                        .HasColumnType("character varying(26)");

                    b.Property<string>("IdCustomer")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<bool?>("ValueBool")
                        .HasColumnType("boolean");

                    b.Property<DateOnly?>("ValueDate")
                        .HasColumnType("date");

                    b.Property<int?>("ValueNumber")
                        .HasColumnType("integer");

                    b.Property<string>("ValueString")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("IdAttributeOption");

                    b.HasIndex("IdCustomer");

                    b.ToTable("AttributesCustomer", (string)null);
                });

            modelBuilder.Entity("Domain.Models.SpecialFields.AttributeOption", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(26)");

                    b.Property<string>("ColorSquaresRgb")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateLastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<string>("IdAttribute")
                        .HasColumnType("character varying(26)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("IdAttribute");

                    b.ToTable("AttributeOptions", (string)null);
                });

            modelBuilder.Entity("Domain.Models.SpecialFields.AttributeOptionValue", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(26)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateLastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FilePath")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("IdAttributeOption")
                        .HasColumnType("character varying(26)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("IdAttributeOption");

                    b.ToTable("AttributeOptionsValues", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Domain.Models.IdentityModels.User", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("Address")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("CodeMelli")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Family")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<byte?>("Flag")
                        .HasColumnType("smallint");

                    b.Property<byte?>("Gender")
                        .HasColumnType("smallint");

                    b.Property<string>("IdBusiness")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<string>("IdCity")
                        .HasColumnType("character varying(26)");

                    b.Property<string>("IdGroup")
                        .HasColumnType("character varying(26)");

                    b.Property<string>("LastIp")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("LastLoginDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("Limited")
                        .HasColumnType("boolean");

                    b.Property<int?>("LoginCount")
                        .HasColumnType("integer");

                    b.Property<byte?>("Married")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("OtpPassword")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime?>("OtpPasswordExpired")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PostalCode")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Token")
                        .HasColumnType("text");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("WebSite")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasIndex("IdBusiness");

                    b.HasIndex("IdCity");

                    b.HasIndex("IdGroup");

                    b.HasDiscriminator().HasValue("User");
                });

            modelBuilder.Entity("Domain.Models.Businesses.Pardakhts.Pardakht", b =>
                {
                    b.HasOne("Domain.Models.Businesses.Business", "IdBusinessNavigation")
                        .WithMany("Pardakhts")
                        .HasForeignKey("IdBusiness")
                        .IsRequired()
                        .HasConstraintName("FK_Pardakht_Business");

                    b.HasOne("Domain.Models.IdentityModels.User", "IdUserNavigation")
                        .WithMany("Pardakhts")
                        .HasForeignKey("IdUser")
                        .IsRequired()
                        .HasConstraintName("FK_Pardakht_User");

                    b.HasOne("Domain.Models.IdentityModels.User", "IdUserAddNavigation")
                        .WithMany("PardakhtsAdded")
                        .HasForeignKey("IdUserAdded")
                        .IsRequired()
                        .HasConstraintName("FK_Add_Pardakht_User");

                    b.HasOne("Domain.Models.IdentityModels.User", "IdUserUpdateNavigation")
                        .WithMany("PardakhtsUpdated")
                        .HasForeignKey("IdUserUpdated")
                        .IsRequired()
                        .HasConstraintName("FK_Update_Pardakht_User");

                    b.Navigation("IdBusinessNavigation");

                    b.Navigation("IdUserAddNavigation");

                    b.Navigation("IdUserNavigation");

                    b.Navigation("IdUserUpdateNavigation");
                });

            modelBuilder.Entity("Domain.Models.Businesses.Pardakhts.PardakhtTakhfif", b =>
                {
                    b.HasOne("Domain.Models.Businesses.Pardakhts.Pardakht", "IdPardakhtNavigation")
                        .WithMany("PardakhtTakhfifs")
                        .HasForeignKey("IdPardakht")
                        .IsRequired()
                        .HasConstraintName("FK_PardakhtTakhfif_Pardakht");

                    b.HasOne("Domain.Models.Businesses.Pardakhts.Takhfif", "IdTakhfifNavigation")
                        .WithMany("PardakhtTakhfifs")
                        .HasForeignKey("IdTakhfif")
                        .IsRequired()
                        .HasConstraintName("FK_PardakhtTakhfif_Takhfif");

                    b.HasOne("Domain.Models.IdentityModels.User", "IdUserAddNavigation")
                        .WithMany("PardakhtTakhfifsAdded")
                        .HasForeignKey("IdUserAdded")
                        .IsRequired()
                        .HasConstraintName("FK_Add_PardakhtTakhfif_User");

                    b.HasOne("Domain.Models.IdentityModels.User", "IdUserUpdateNavigation")
                        .WithMany("PardakhtTakhfifsUpdated")
                        .HasForeignKey("IdUserUpdated")
                        .IsRequired()
                        .HasConstraintName("FK_Update_PardakhtTakhfif_User");

                    b.Navigation("IdPardakhtNavigation");

                    b.Navigation("IdTakhfifNavigation");

                    b.Navigation("IdUserAddNavigation");

                    b.Navigation("IdUserUpdateNavigation");
                });

            modelBuilder.Entity("Domain.Models.Businesses.Pardakhts.Takhfif", b =>
                {
                    b.HasOne("Domain.Models.IdentityModels.User", "IdUserAddNavigation")
                        .WithMany("TakhfifsAdded")
                        .HasForeignKey("IdUserAdded")
                        .IsRequired()
                        .HasConstraintName("FK_Add_Takhfif_User");

                    b.HasOne("Domain.Models.IdentityModels.User", "IdUserUpdateNavigation")
                        .WithMany("TakhfifsUpdated")
                        .HasForeignKey("IdUserUpdated")
                        .IsRequired()
                        .HasConstraintName("FK_Update_Takhfif_User");

                    b.Navigation("IdUserAddNavigation");

                    b.Navigation("IdUserUpdateNavigation");
                });

            modelBuilder.Entity("Domain.Models.Businesses.Plans.BusinessPlan", b =>
                {
                    b.HasOne("Domain.Models.Businesses.Business", "IdBusinessNavigation")
                        .WithMany("BusinessPlans")
                        .HasForeignKey("IdBusiness")
                        .IsRequired()
                        .HasConstraintName("FK_BusinessPlan_Business");

                    b.HasOne("Domain.Models.Businesses.Pardakhts.Pardakht", "IdPardakhtNavigation")
                        .WithMany("BusinessPlans")
                        .HasForeignKey("IdPardakht")
                        .IsRequired()
                        .HasConstraintName("FK_BusinessPlan_Pardakht");

                    b.HasOne("Domain.Models.Businesses.Plans.Plan", "IdPlanNavigation")
                        .WithMany("BusinessPlans")
                        .HasForeignKey("IdPlan")
                        .IsRequired()
                        .HasConstraintName("FK_BusinessPlan_Plan");

                    b.HasOne("Domain.Models.IdentityModels.User", "IdUserNavigation")
                        .WithMany("BusinessPlans")
                        .HasForeignKey("IdUser")
                        .IsRequired()
                        .HasConstraintName("FK_BusinessPlan_User");

                    b.HasOne("Domain.Models.IdentityModels.User", "IdUserAddNavigation")
                        .WithMany("BusinessPlansAdded")
                        .HasForeignKey("IdUserAdded")
                        .IsRequired()
                        .HasConstraintName("FK_Add_BusinessPlan_User");

                    b.HasOne("Domain.Models.IdentityModels.User", "IdUserUpdateNavigation")
                        .WithMany("BusinessPlansUpdated")
                        .HasForeignKey("IdUserUpdated")
                        .IsRequired()
                        .HasConstraintName("FK_Update_BusinessPlan_User");

                    b.Navigation("IdBusinessNavigation");

                    b.Navigation("IdPardakhtNavigation");

                    b.Navigation("IdPlanNavigation");

                    b.Navigation("IdUserAddNavigation");

                    b.Navigation("IdUserNavigation");

                    b.Navigation("IdUserUpdateNavigation");
                });

            modelBuilder.Entity("Domain.Models.Businesses.Plans.Plan", b =>
                {
                    b.HasOne("Domain.Models.IdentityModels.User", "IdUserAddNavigation")
                        .WithMany("PlansAdded")
                        .HasForeignKey("IdUserAdded")
                        .IsRequired()
                        .HasConstraintName("FK_Add_Plan_User");

                    b.HasOne("Domain.Models.IdentityModels.User", "IdUserUpdateNavigation")
                        .WithMany("PlansUpdated")
                        .HasForeignKey("IdUserUpdated")
                        .IsRequired()
                        .HasConstraintName("FK_Update_Plan_User");

                    b.Navigation("IdUserAddNavigation");

                    b.Navigation("IdUserUpdateNavigation");
                });

            modelBuilder.Entity("Domain.Models.Contacts.Contact", b =>
                {
                    b.HasOne("Domain.Models.Contacts.ContactGroup", "ContactGroup")
                        .WithMany("Contacts")
                        .HasForeignKey("ContactGroupId")
                        .IsRequired()
                        .HasConstraintName("FK_ContactGroup_Contact");

                    b.Navigation("ContactGroup");
                });

            modelBuilder.Entity("Domain.Models.Contacts.ContactPhoneNumber", b =>
                {
                    b.HasOne("Domain.Models.Contacts.Contact", "Contacts")
                        .WithMany("ContactPhoneNumbers")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contacts");
                });

            modelBuilder.Entity("Domain.Models.Contacts.ContactsEmailAddress", b =>
                {
                    b.HasOne("Domain.Models.Contacts.Contact", "Contacts")
                        .WithMany("ContactsEmailAddresses")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contacts");
                });

            modelBuilder.Entity("Domain.Models.Customers.Customer", b =>
                {
                    b.HasOne("Domain.Models.Location.City", "IdCityNavigation")
                        .WithMany("Customers")
                        .HasForeignKey("IdCity")
                        .HasConstraintName("FK_Customer_City");

                    b.HasOne("Domain.Models.Customers.Customer", "IdMoarefNavigation")
                        .WithMany("Moarefs")
                        .HasForeignKey("IdMoaref")
                        .HasConstraintName("FK_Customer_MoAref");

                    b.HasOne("Domain.Models.IdentityModels.User", "IdUserNavigation")
                        .WithMany("Customers")
                        .HasForeignKey("IdUser")
                        .IsRequired()
                        .HasConstraintName("FK_Customer_User");

                    b.HasOne("Domain.Models.IdentityModels.User", "IdUserAddNavigation")
                        .WithMany("CustomersAdded")
                        .HasForeignKey("IdUserAdded")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Customers_User_Added");

                    b.HasOne("Domain.Models.IdentityModels.User", "IdUserUpdateNavigation")
                        .WithMany("CustomersUpdated")
                        .HasForeignKey("IdUserUpdated")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Customers_User_Updated");

                    b.Navigation("IdCityNavigation");

                    b.Navigation("IdMoarefNavigation");

                    b.Navigation("IdUserAddNavigation");

                    b.Navigation("IdUserNavigation");

                    b.Navigation("IdUserUpdateNavigation");
                });

            modelBuilder.Entity("Domain.Models.Customers.CustomerAddress", b =>
                {
                    b.HasOne("Domain.Models.Customers.Customer", "IdCustomerNavigation")
                        .WithMany("CustomerAddresses")
                        .HasForeignKey("IdCustomer")
                        .IsRequired()
                        .HasConstraintName("FK_CustomerAddresses_Customers");

                    b.Navigation("IdCustomerNavigation");
                });

            modelBuilder.Entity("Domain.Models.Customers.CustomersEmailAddress", b =>
                {
                    b.HasOne("Domain.Models.Customers.Customer", "IdCustomerNavigation")
                        .WithMany("EmailAddresses")
                        .HasForeignKey("IdCustomer")
                        .IsRequired()
                        .HasConstraintName("FK_CustomersEmailAddress_Customers");

                    b.Navigation("IdCustomerNavigation");
                });

            modelBuilder.Entity("Domain.Models.Customers.CustomersPhoneNumber", b =>
                {
                    b.HasOne("Domain.Models.Customers.Customer", "IdCustomerNavigation")
                        .WithMany("PhoneNumbers")
                        .HasForeignKey("IdCustomer")
                        .IsRequired()
                        .HasConstraintName("FK_CustomersPhoneNumber_Customers");

                    b.Navigation("IdCustomerNavigation");
                });

            modelBuilder.Entity("Domain.Models.Customers.FeedBack.CustomerFeedback", b =>
                {
                    b.HasOne("Domain.Models.Customers.FeedBack.CustomerFeedbackCategory", "IdCategoryNavigation")
                        .WithMany("Feedbacks")
                        .HasForeignKey("IdCategory")
                        .IsRequired()
                        .HasConstraintName("FK_CustomerFeedbacks_Category");

                    b.HasOne("Domain.Models.Customers.Customer", "IdCustomerNavigation")
                        .WithMany("CustomerFeedbacks")
                        .HasForeignKey("IdCustomer")
                        .HasConstraintName("FK_CustomerFeedbacks_Customer");

                    b.HasOne("Domain.Models.Products.Product", "IdProductNavigation")
                        .WithMany("CustomerFeedbacks")
                        .HasForeignKey("IdProduct")
                        .HasConstraintName("FK_CustomerFeedbacks_Product");

                    b.HasOne("Domain.Models.IdentityModels.User", "IdUserNavigation")
                        .WithMany("CustomerFeedbacks")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("FK_CustomerFeedbacks_User");

                    b.HasOne("Domain.Models.IdentityModels.User", "IdUserAddNavigation")
                        .WithMany("CustomerFeedbacksAdded")
                        .HasForeignKey("IdUserAdded")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CustomerFeedbacks_User_Added");

                    b.HasOne("Domain.Models.IdentityModels.User", "IdUserUpdateNavigation")
                        .WithMany("CustomerFeedbacksUpdated")
                        .HasForeignKey("IdUserUpdated")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CustomerFeedbacks_User_Updated");

                    b.Navigation("IdCategoryNavigation");

                    b.Navigation("IdCustomerNavigation");

                    b.Navigation("IdProductNavigation");

                    b.Navigation("IdUserAddNavigation");

                    b.Navigation("IdUserNavigation");

                    b.Navigation("IdUserUpdateNavigation");
                });

            modelBuilder.Entity("Domain.Models.Customers.FeedBack.CustomerFeedbackAttachment", b =>
                {
                    b.HasOne("Domain.Models.Customers.FeedBack.CustomerFeedback", "IdCustomerFeedbackNavigation")
                        .WithMany("Attachments")
                        .HasForeignKey("IdCustomerFeedback")
                        .IsRequired()
                        .HasConstraintName("FK_CustomerFeedback_CustomerFeedbackAttachment");

                    b.Navigation("IdCustomerFeedbackNavigation");
                });

            modelBuilder.Entity("Domain.Models.Customers.FeedBack.CustomerFeedbackCategory", b =>
                {
                    b.HasOne("Domain.Models.Businesses.Business", "IdBusinessNavigation")
                        .WithMany("CustomerFeedbackCategories")
                        .HasForeignKey("IdBusiness")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CustomerFeedbackCategory_Business");

                    b.HasOne("Domain.Models.IdentityModels.User", "IdUserAddNavigation")
                        .WithMany("CustomerFeedbackCategoryAdded")
                        .HasForeignKey("IdUserAdded")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CustomerFeedbacksCategory_User_Added");

                    b.HasOne("Domain.Models.IdentityModels.User", "IdUserUpdateNavigation")
                        .WithMany("CustomerFeedbackCategoryUpdated")
                        .HasForeignKey("IdUserUpdated")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CustomerFeedbackCategory_User_Updated");

                    b.HasOne("Domain.Models.IdentityModels.User", null)
                        .WithMany("CustomerFeedbackCategories")
                        .HasForeignKey("UserId");

                    b.Navigation("IdBusinessNavigation");

                    b.Navigation("IdUserAddNavigation");

                    b.Navigation("IdUserUpdateNavigation");
                });

            modelBuilder.Entity("Domain.Models.Customers.Foroosh.ForooshFactor", b =>
                {
                    b.HasOne("Domain.Models.Customers.Customer", "IdCustomerNavigation")
                        .WithMany("ForooshFactors")
                        .HasForeignKey("IdCustomer")
                        .IsRequired()
                        .HasConstraintName("FK_ForooshFactor_Customers");

                    b.HasOne("Domain.Models.Customers.CustomerAddress", "IdCustomerAddressNavigation")
                        .WithMany("ForooshFactors")
                        .HasForeignKey("IdCustomerAddress")
                        .HasConstraintName("FK_ForooshFactor_CustomerAddress");

                    b.HasOne("Domain.Models.IdentityModels.User", "IdUserAddNavigation")
                        .WithMany("ForooshFactorsAdded")
                        .HasForeignKey("IdUserAdded")
                        .IsRequired()
                        .HasConstraintName("FK_Add_ForooshFactor_User");

                    b.HasOne("Domain.Models.IdentityModels.User", "IdUserUpdateNavigation")
                        .WithMany("ForooshFactorsUpdated")
                        .HasForeignKey("IdUserUpdated")
                        .IsRequired()
                        .HasConstraintName("FK_Update_ForooshFactor_User");

                    b.Navigation("IdCustomerAddressNavigation");

                    b.Navigation("IdCustomerNavigation");

                    b.Navigation("IdUserAddNavigation");

                    b.Navigation("IdUserUpdateNavigation");
                });

            modelBuilder.Entity("Domain.Models.Customers.Foroosh.ForooshOrder", b =>
                {
                    b.HasOne("Domain.Models.Customers.Foroosh.ForooshFactor", "IdForooshFactorNavigation")
                        .WithMany("ForooshOrders")
                        .HasForeignKey("IdForooshFactor")
                        .IsRequired()
                        .HasConstraintName("FK_ForooshFactor_ForooshOrder");

                    b.HasOne("Domain.Models.Products.Product", "IdProductNavigation")
                        .WithMany("ForooshOrders")
                        .HasForeignKey("IdProduct")
                        .IsRequired()
                        .HasConstraintName("FK_ForooshOrder_Product");

                    b.HasOne("Domain.Models.IdentityModels.User", "IdUserAddNavigation")
                        .WithMany("ForooshOrdersAdded")
                        .HasForeignKey("IdUserAdded")
                        .IsRequired()
                        .HasConstraintName("FK_Add_ForooshOrder_User");

                    b.HasOne("Domain.Models.IdentityModels.User", "IdUserUpdateNavigation")
                        .WithMany("ForooshOrdersUpdated")
                        .HasForeignKey("IdUserUpdated")
                        .IsRequired()
                        .HasConstraintName("FK_Update_ForooshOrder_User");

                    b.Navigation("IdForooshFactorNavigation");

                    b.Navigation("IdProductNavigation");

                    b.Navigation("IdUserAddNavigation");

                    b.Navigation("IdUserUpdateNavigation");
                });

            modelBuilder.Entity("Domain.Models.Customers.Foroosh.ForooshPayment", b =>
                {
                    b.HasOne("Domain.Models.Customers.Foroosh.ForooshFactor", "IdForooshFactorNavigation")
                        .WithMany("Payments")
                        .HasForeignKey("IdForooshFactor")
                        .IsRequired()
                        .HasConstraintName("FK_Payment_ForooshFactor");

                    b.Navigation("IdForooshFactorNavigation");
                });

            modelBuilder.Entity("Domain.Models.Customers.Notes.CustomerNote", b =>
                {
                    b.HasOne("Domain.Models.Customers.Customer", "IdCustomerNavigation")
                        .WithMany("CustomerNotes")
                        .HasForeignKey("IdCustomer")
                        .IsRequired()
                        .HasConstraintName("FK_CustomerNote_Customers");

                    b.HasOne("Domain.Models.Products.Product", "IdProductNavigation")
                        .WithMany("CustomerNotes")
                        .HasForeignKey("IdProduct")
                        .HasConstraintName("FK_CustomerNote_Product");

                    b.HasOne("Domain.Models.IdentityModels.User", "IdUserAddNavigation")
                        .WithMany("CustomerNotesAdded")
                        .HasForeignKey("IdUserAdded")
                        .IsRequired()
                        .HasConstraintName("FK_Add_CustomerNote_User");

                    b.HasOne("Domain.Models.IdentityModels.User", "IdUserUpdateNavigation")
                        .WithMany("CustomerNotesUpdated")
                        .HasForeignKey("IdUserUpdated")
                        .IsRequired()
                        .HasConstraintName("FK_Update_CustomerNote_User");

                    b.Navigation("IdCustomerNavigation");

                    b.Navigation("IdProductNavigation");

                    b.Navigation("IdUserAddNavigation");

                    b.Navigation("IdUserUpdateNavigation");
                });

            modelBuilder.Entity("Domain.Models.Customers.Notes.CustomerNoteAttachment", b =>
                {
                    b.HasOne("Domain.Models.Customers.Notes.CustomerNote", "IdCustomerNoteNavigation")
                        .WithMany("NoteAttachments")
                        .HasForeignKey("IdCustomerNote")
                        .IsRequired()
                        .HasConstraintName("FK_CustomerNoteAttachment_CustomerNote");

                    b.Navigation("IdCustomerNoteNavigation");
                });

            modelBuilder.Entity("Domain.Models.Customers.Notes.CustomerNoteHashTable", b =>
                {
                    b.HasOne("Domain.Models.Businesses.Business", "IdBusinessNavigation")
                        .WithMany("CustomerNoteHashTables")
                        .HasForeignKey("IdBusiness")
                        .IsRequired()
                        .HasConstraintName("FK_CustomersEmailAddress_Business");

                    b.Navigation("IdBusinessNavigation");
                });

            modelBuilder.Entity("Domain.Models.Customers.Notes.CustomerNoteHashTag", b =>
                {
                    b.HasOne("Domain.Models.Customers.Notes.CustomerNote", "IdCustomerNoteNavigation")
                        .WithMany("NoteHashTags")
                        .HasForeignKey("IdCustomerNoteNavigationId");

                    b.HasOne("Domain.Models.Customers.Notes.CustomerNoteHashTable", "IdNoteHashTableNavigation")
                        .WithMany("CustomerNoteHashTags")
                        .HasForeignKey("IdNoteHashTable")
                        .IsRequired()
                        .HasConstraintName("FK_CustomerNoteHashTag_CustomerNoteHashTable");

                    b.Navigation("IdCustomerNoteNavigation");

                    b.Navigation("IdNoteHashTableNavigation");
                });

            modelBuilder.Entity("Domain.Models.Customers.PeyGiry.CustomerPeyGiry", b =>
                {
                    b.HasOne("Domain.Models.Customers.Customer", "IdCustomerNavigation")
                        .WithMany("CustomerPeyGiries")
                        .HasForeignKey("IdCustomer")
                        .IsRequired()
                        .HasConstraintName("FK_CustomerPeyGiry_Customers");

                    b.HasOne("Domain.Models.Customers.PeyGiry.PeyGiryCategory", "IdPeyGiryCategoryNavigation")
                        .WithMany("CustomerPeyGiries")
                        .HasForeignKey("IdPeyGiryCategory")
                        .IsRequired()
                        .HasConstraintName("FK_PeyGiryCategory_CustomerPeyGiry");

                    b.HasOne("Domain.Models.IdentityModels.User", "IdUserNavigation")
                        .WithMany("CustomerPeyGiries")
                        .HasForeignKey("IdUser")
                        .IsRequired()
                        .HasConstraintName("FK_user_CustomerPeyGiry_User");

                    b.HasOne("Domain.Models.IdentityModels.User", "IdUserAddNavigation")
                        .WithMany("CustomerPeyGiriesAdded")
                        .HasForeignKey("IdUserAdded")
                        .IsRequired()
                        .HasConstraintName("FK_Add_CustomerPeyGiry_User");

                    b.HasOne("Domain.Models.IdentityModels.User", "IdUserUpdateNavigation")
                        .WithMany("CustomerPeyGiriesUpdated")
                        .HasForeignKey("IdUserUpdated")
                        .IsRequired()
                        .HasConstraintName("FK_Update_CustomerPeyGiry_User");

                    b.Navigation("IdCustomerNavigation");

                    b.Navigation("IdPeyGiryCategoryNavigation");

                    b.Navigation("IdUserAddNavigation");

                    b.Navigation("IdUserNavigation");

                    b.Navigation("IdUserUpdateNavigation");
                });

            modelBuilder.Entity("Domain.Models.Customers.PeyGiry.PeyGiryAttachment", b =>
                {
                    b.HasOne("Domain.Models.Customers.PeyGiry.CustomerPeyGiry", "IdCustomerPeyGiryNavigation")
                        .WithMany("PeyGiryAttachments")
                        .HasForeignKey("IdPeyGiry")
                        .IsRequired()
                        .HasConstraintName("FK_PeyGiryAttachment_PeyGiry");

                    b.Navigation("IdCustomerPeyGiryNavigation");
                });

            modelBuilder.Entity("Domain.Models.Customers.PeyGiry.PeyGiryCategory", b =>
                {
                    b.HasOne("Domain.Models.Businesses.Business", "IdBusinessNavigation")
                        .WithMany("PeyGiryCategories")
                        .HasForeignKey("BusinessId")
                        .HasConstraintName("FK_Business_PeyGiryCategory");

                    b.HasOne("Domain.Models.IdentityModels.User", "IdUserNavigation")
                        .WithMany("PeyGiryCategories")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("FK_User_PeyGiryCategory");

                    b.HasOne("Domain.Models.IdentityModels.User", "IdUserAddNavigation")
                        .WithMany("PeyGiryCategoriesAdded")
                        .HasForeignKey("IdUserAdded")
                        .IsRequired()
                        .HasConstraintName("FK_UserAdded_PeyGiryCategory");

                    b.HasOne("Domain.Models.IdentityModels.User", "IdUserUpdateNavigation")
                        .WithMany("PeyGiryCategoriesUpdated")
                        .HasForeignKey("IdUserUpdated")
                        .IsRequired()
                        .HasConstraintName("FK_UserUpdated_PeyGiryCategory");

                    b.Navigation("IdBusinessNavigation");

                    b.Navigation("IdUserAddNavigation");

                    b.Navigation("IdUserNavigation");

                    b.Navigation("IdUserUpdateNavigation");
                });

            modelBuilder.Entity("Domain.Models.Customers.ProductCustomerFavoritesList", b =>
                {
                    b.HasOne("Domain.Models.Customers.Customer", "IdCustomerNavigation")
                        .WithMany("FavoritesLists")
                        .HasForeignKey("IdCustomer")
                        .IsRequired()
                        .HasConstraintName("FK_ProductCustomerFavoritesList_Customers");

                    b.HasOne("Domain.Models.Products.Product", "IdProductNavigation")
                        .WithMany("FavoritesLists")
                        .HasForeignKey("IdProduct")
                        .IsRequired()
                        .HasConstraintName("FK_ProductCustomerFavoritesList_Products");

                    b.Navigation("IdCustomerNavigation");

                    b.Navigation("IdProductNavigation");
                });

            modelBuilder.Entity("Domain.Models.IdentityModels.UserGroup", b =>
                {
                    b.HasOne("Domain.Models.Businesses.Business", "IdBusinessNavigation")
                        .WithMany("UserGroups")
                        .HasForeignKey("IdBusiness")
                        .IsRequired()
                        .HasConstraintName("FK_UserGroup_Business");

                    b.HasOne("Domain.Models.IdentityModels.User", "IdUserAddNavigation")
                        .WithMany("GroupAdded")
                        .HasForeignKey("IdUserAdded")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UserGroup_User_Added");

                    b.HasOne("Domain.Models.IdentityModels.User", "IdUserUpdateNavigation")
                        .WithMany("GroupUpdated")
                        .HasForeignKey("IdUserUpdated")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UserGroup_User_Updated");

                    b.Navigation("IdBusinessNavigation");

                    b.Navigation("IdUserAddNavigation");

                    b.Navigation("IdUserUpdateNavigation");
                });

            modelBuilder.Entity("Domain.Models.Location.City", b =>
                {
                    b.HasOne("Domain.Models.Location.Province", "IdProvinceNavigation")
                        .WithMany("Cities")
                        .HasForeignKey("IdProvince")
                        .IsRequired()
                        .HasConstraintName("FK_City_Province");

                    b.Navigation("IdProvinceNavigation");
                });

            modelBuilder.Entity("Domain.Models.Location.Province", b =>
                {
                    b.HasOne("Domain.Models.Location.Country", "IdCountryNavigation")
                        .WithMany("Provinces")
                        .HasForeignKey("IdCountry")
                        .IsRequired()
                        .HasConstraintName("FK_Province_Country");

                    b.Navigation("IdCountryNavigation");
                });

            modelBuilder.Entity("Domain.Models.LogsUser.Log", b =>
                {
                    b.HasOne("Domain.Models.Customers.Customer", "Customer")
                        .WithMany("Logs")
                        .HasForeignKey("CustomerId");

                    b.HasOne("Domain.Models.Customers.FeedBack.CustomerFeedback", "Feedback")
                        .WithMany()
                        .HasForeignKey("FeedBackId");

                    b.HasOne("Domain.Models.Customers.Foroosh.ForooshFactor", "ForooshFactor")
                        .WithMany("Logs")
                        .HasForeignKey("ForooshFactorId");

                    b.HasOne("Domain.Models.Customers.Notes.CustomerNote", "Note")
                        .WithMany("Logs")
                        .HasForeignKey("NoteId");

                    b.HasOne("Domain.Models.Customers.PeyGiry.CustomerPeyGiry", "PeyGiry")
                        .WithMany("Logs")
                        .HasForeignKey("PeyGiryId");

                    b.HasOne("Domain.Models.Products.ProductCategory", "ProductCategory")
                        .WithMany("Logs")
                        .HasForeignKey("ProductCategoryId");

                    b.HasOne("Domain.Models.Products.Product", "Product")
                        .WithMany("Logs")
                        .HasForeignKey("ProductId");

                    b.HasOne("Domain.Models.IdentityModels.User", "User")
                        .WithMany("Logs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Feedback");

                    b.Navigation("ForooshFactor");

                    b.Navigation("Note");

                    b.Navigation("PeyGiry");

                    b.Navigation("Product");

                    b.Navigation("ProductCategory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.Notifications.Notif", b =>
                {
                    b.HasOne("Domain.Models.Customers.PeyGiry.CustomerPeyGiry", "IdPeyGiryNavigation")
                        .WithMany("Notifications")
                        .HasForeignKey("IdPeyGiry")
                        .HasConstraintName("FK_Notifications_CustomerPeyGiry");

                    b.HasOne("Domain.Models.IdentityModels.User", "IdUserNavigation")
                        .WithMany("Notifications")
                        .HasForeignKey("IdUser")
                        .IsRequired()
                        .HasConstraintName("FK_Notifications_User");

                    b.HasOne("Domain.Models.IdentityModels.User", "IdUserAddNavigation")
                        .WithMany("NotificationAdded")
                        .HasForeignKey("IdUserAdded")
                        .IsRequired()
                        .HasConstraintName("FK_Add_Notifications_User");

                    b.HasOne("Domain.Models.IdentityModels.User", "IdUserUpdateNavigation")
                        .WithMany("NotificationUpdated")
                        .HasForeignKey("IdUserUpdated")
                        .IsRequired()
                        .HasConstraintName("FK_Update_Notifications_User");

                    b.Navigation("IdPeyGiryNavigation");

                    b.Navigation("IdUserAddNavigation");

                    b.Navigation("IdUserNavigation");

                    b.Navigation("IdUserUpdateNavigation");
                });

            modelBuilder.Entity("Domain.Models.Products.Product", b =>
                {
                    b.HasOne("Domain.Models.Products.ProductCategory", "ProductCategory")
                        .WithMany("Products")
                        .HasForeignKey("IdProductCategory")
                        .IsRequired()
                        .HasConstraintName("FK_Product_ProductCategory");

                    b.HasOne("Domain.Models.IdentityModels.User", "IdUserAddNavigation")
                        .WithMany()
                        .HasForeignKey("IdUserAddNavigationId");

                    b.HasOne("Domain.Models.IdentityModels.User", "IdUserUpdateNavigation")
                        .WithMany()
                        .HasForeignKey("IdUserUpdateNavigationId");

                    b.Navigation("IdUserAddNavigation");

                    b.Navigation("IdUserUpdateNavigation");

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("Domain.Models.Products.ProductCategory", b =>
                {
                    b.HasOne("Domain.Models.Businesses.Business", "Business")
                        .WithMany("ProductCategories")
                        .HasForeignKey("BusinessId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductCategories_Business");

                    b.HasOne("Domain.Models.IdentityModels.User", "IdUserAddNavigation")
                        .WithMany()
                        .HasForeignKey("IdUserAddNavigationId");

                    b.HasOne("Domain.Models.IdentityModels.User", "IdUserUpdateNavigation")
                        .WithMany()
                        .HasForeignKey("IdUserUpdateNavigationId");

                    b.Navigation("Business");

                    b.Navigation("IdUserAddNavigation");

                    b.Navigation("IdUserUpdateNavigation");
                });

            modelBuilder.Entity("Domain.Models.SpecialFields.Attribute", b =>
                {
                    b.HasOne("Domain.Models.Businesses.Business", "IdBusinessNavigation")
                        .WithMany("Attributes")
                        .HasForeignKey("IdBusiness")
                        .HasConstraintName("FK_Attribute_Business");

                    b.HasOne("Domain.Models.IdentityModels.User", "IdUserAddNavigation")
                        .WithMany("AttributeAdded")
                        .HasForeignKey("IdUserAdded")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Attribute_User_Added");

                    b.HasOne("Domain.Models.IdentityModels.User", "IdUserUpdateNavigation")
                        .WithMany("AttributeUpdated")
                        .HasForeignKey("IdUserUpdated")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Attribute_User_Updated");

                    b.Navigation("IdBusinessNavigation");

                    b.Navigation("IdUserAddNavigation");

                    b.Navigation("IdUserUpdateNavigation");
                });

            modelBuilder.Entity("Domain.Models.SpecialFields.AttributeCustomer", b =>
                {
                    b.HasOne("Domain.Models.SpecialFields.AttributeOption", "IdAttributeOptionNavigation")
                        .WithMany("CustomerAttributes")
                        .HasForeignKey("IdAttributeOption")
                        .HasConstraintName("FK_AttributeOption_AttributesCustomer");

                    b.HasOne("Domain.Models.Customers.Customer", "IdCustomerNavigation")
                        .WithMany("CustomerAttributes")
                        .HasForeignKey("IdCustomer")
                        .IsRequired()
                        .HasConstraintName("FK_Customer_AttributesCustomer");

                    b.Navigation("IdAttributeOptionNavigation");

                    b.Navigation("IdCustomerNavigation");
                });

            modelBuilder.Entity("Domain.Models.SpecialFields.AttributeOption", b =>
                {
                    b.HasOne("Domain.Models.SpecialFields.Attribute", "IdAttributeNavigation")
                        .WithMany("AttributeOptions")
                        .HasForeignKey("IdAttribute")
                        .HasConstraintName("FK_AttributeOption_Attribute");

                    b.Navigation("IdAttributeNavigation");
                });

            modelBuilder.Entity("Domain.Models.SpecialFields.AttributeOptionValue", b =>
                {
                    b.HasOne("Domain.Models.SpecialFields.AttributeOption", "AttributeOptions")
                        .WithMany("AttributeOptionValues")
                        .HasForeignKey("IdAttributeOption")
                        .HasConstraintName("FK_AttributeOption_AttributeOptionValue");

                    b.Navigation("AttributeOptions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.IdentityModels.User", b =>
                {
                    b.HasOne("Domain.Models.Businesses.Business", "IdBusinessNavigation")
                        .WithMany("Users")
                        .HasForeignKey("IdBusiness")
                        .IsRequired()
                        .HasConstraintName("FK_Business_User");

                    b.HasOne("Domain.Models.Location.City", "IdCityNavigation")
                        .WithMany("Users")
                        .HasForeignKey("IdCity")
                        .HasConstraintName("FK_AspNetUsers_City");

                    b.HasOne("Domain.Models.IdentityModels.UserGroup", "IdGroupNavigation")
                        .WithMany("Users")
                        .HasForeignKey("IdGroup")
                        .HasConstraintName("FK_UserGroup_User");

                    b.Navigation("IdBusinessNavigation");

                    b.Navigation("IdCityNavigation");

                    b.Navigation("IdGroupNavigation");
                });

            modelBuilder.Entity("Domain.Models.Businesses.Business", b =>
                {
                    b.Navigation("Attributes");

                    b.Navigation("BusinessPlans");

                    b.Navigation("CustomerFeedbackCategories");

                    b.Navigation("CustomerNoteHashTables");

                    b.Navigation("Pardakhts");

                    b.Navigation("PeyGiryCategories");

                    b.Navigation("ProductCategories");

                    b.Navigation("UserGroups");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Domain.Models.Businesses.Pardakhts.Pardakht", b =>
                {
                    b.Navigation("BusinessPlans");

                    b.Navigation("PardakhtTakhfifs");
                });

            modelBuilder.Entity("Domain.Models.Businesses.Pardakhts.Takhfif", b =>
                {
                    b.Navigation("PardakhtTakhfifs");
                });

            modelBuilder.Entity("Domain.Models.Businesses.Plans.Plan", b =>
                {
                    b.Navigation("BusinessPlans");
                });

            modelBuilder.Entity("Domain.Models.Contacts.Contact", b =>
                {
                    b.Navigation("ContactPhoneNumbers");

                    b.Navigation("ContactsEmailAddresses");
                });

            modelBuilder.Entity("Domain.Models.Contacts.ContactGroup", b =>
                {
                    b.Navigation("Contacts");
                });

            modelBuilder.Entity("Domain.Models.Customers.Customer", b =>
                {
                    b.Navigation("CustomerAddresses");

                    b.Navigation("CustomerAttributes");

                    b.Navigation("CustomerFeedbacks");

                    b.Navigation("CustomerNotes");

                    b.Navigation("CustomerPeyGiries");

                    b.Navigation("EmailAddresses");

                    b.Navigation("FavoritesLists");

                    b.Navigation("ForooshFactors");

                    b.Navigation("Logs");

                    b.Navigation("Moarefs");

                    b.Navigation("PhoneNumbers");
                });

            modelBuilder.Entity("Domain.Models.Customers.CustomerAddress", b =>
                {
                    b.Navigation("ForooshFactors");
                });

            modelBuilder.Entity("Domain.Models.Customers.FeedBack.CustomerFeedback", b =>
                {
                    b.Navigation("Attachments");
                });

            modelBuilder.Entity("Domain.Models.Customers.FeedBack.CustomerFeedbackCategory", b =>
                {
                    b.Navigation("Feedbacks");
                });

            modelBuilder.Entity("Domain.Models.Customers.Foroosh.ForooshFactor", b =>
                {
                    b.Navigation("ForooshOrders");

                    b.Navigation("Logs");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Domain.Models.Customers.Notes.CustomerNote", b =>
                {
                    b.Navigation("Logs");

                    b.Navigation("NoteAttachments");

                    b.Navigation("NoteHashTags");
                });

            modelBuilder.Entity("Domain.Models.Customers.Notes.CustomerNoteHashTable", b =>
                {
                    b.Navigation("CustomerNoteHashTags");
                });

            modelBuilder.Entity("Domain.Models.Customers.PeyGiry.CustomerPeyGiry", b =>
                {
                    b.Navigation("Logs");

                    b.Navigation("Notifications");

                    b.Navigation("PeyGiryAttachments");
                });

            modelBuilder.Entity("Domain.Models.Customers.PeyGiry.PeyGiryCategory", b =>
                {
                    b.Navigation("CustomerPeyGiries");
                });

            modelBuilder.Entity("Domain.Models.IdentityModels.UserGroup", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Domain.Models.Location.City", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Domain.Models.Location.Country", b =>
                {
                    b.Navigation("Provinces");
                });

            modelBuilder.Entity("Domain.Models.Location.Province", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("Domain.Models.Products.Product", b =>
                {
                    b.Navigation("CustomerFeedbacks");

                    b.Navigation("CustomerNotes");

                    b.Navigation("FavoritesLists");

                    b.Navigation("ForooshOrders");

                    b.Navigation("Logs");
                });

            modelBuilder.Entity("Domain.Models.Products.ProductCategory", b =>
                {
                    b.Navigation("Logs");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Domain.Models.SpecialFields.Attribute", b =>
                {
                    b.Navigation("AttributeOptions");
                });

            modelBuilder.Entity("Domain.Models.SpecialFields.AttributeOption", b =>
                {
                    b.Navigation("AttributeOptionValues");

                    b.Navigation("CustomerAttributes");
                });

            modelBuilder.Entity("Domain.Models.IdentityModels.User", b =>
                {
                    b.Navigation("AttributeAdded");

                    b.Navigation("AttributeUpdated");

                    b.Navigation("BusinessPlans");

                    b.Navigation("BusinessPlansAdded");

                    b.Navigation("BusinessPlansUpdated");

                    b.Navigation("CustomerFeedbackCategories");

                    b.Navigation("CustomerFeedbackCategoryAdded");

                    b.Navigation("CustomerFeedbackCategoryUpdated");

                    b.Navigation("CustomerFeedbacks");

                    b.Navigation("CustomerFeedbacksAdded");

                    b.Navigation("CustomerFeedbacksUpdated");

                    b.Navigation("CustomerNotesAdded");

                    b.Navigation("CustomerNotesUpdated");

                    b.Navigation("CustomerPeyGiries");

                    b.Navigation("CustomerPeyGiriesAdded");

                    b.Navigation("CustomerPeyGiriesUpdated");

                    b.Navigation("Customers");

                    b.Navigation("CustomersAdded");

                    b.Navigation("CustomersUpdated");

                    b.Navigation("ForooshFactorsAdded");

                    b.Navigation("ForooshFactorsUpdated");

                    b.Navigation("ForooshOrdersAdded");

                    b.Navigation("ForooshOrdersUpdated");

                    b.Navigation("GroupAdded");

                    b.Navigation("GroupUpdated");

                    b.Navigation("Logs");

                    b.Navigation("NotificationAdded");

                    b.Navigation("NotificationUpdated");

                    b.Navigation("Notifications");

                    b.Navigation("PardakhtTakhfifsAdded");

                    b.Navigation("PardakhtTakhfifsUpdated");

                    b.Navigation("Pardakhts");

                    b.Navigation("PardakhtsAdded");

                    b.Navigation("PardakhtsUpdated");

                    b.Navigation("PeyGiryCategories");

                    b.Navigation("PeyGiryCategoriesAdded");

                    b.Navigation("PeyGiryCategoriesUpdated");

                    b.Navigation("PlansAdded");

                    b.Navigation("PlansUpdated");

                    b.Navigation("TakhfifsAdded");

                    b.Navigation("TakhfifsUpdated");
                });
#pragma warning restore 612, 618
        }
    }
}
