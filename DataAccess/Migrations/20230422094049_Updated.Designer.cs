// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(MaadContext))]
    [Migration("20230422094049_Updated")]
    partial class Updated
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Models.Address.Address", b =>
                {
                    b.Property<string>("AddressId")
                        .HasColumnType("character varying(26)");

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Address2")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("AddressStatus")
                        .HasColumnType("integer");

                    b.Property<string>("CityId")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateLastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ZipPostalCode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("AddressId");

                    b.ToTable("Addresses", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Address.City", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(26)");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CityStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateLastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<string>("IdProvince")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("IdProvince");

                    b.ToTable("Cities", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Address.Country", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(26)");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateLastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<int>("StatusCountry")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Countries", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Address.Province", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(26)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateLastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<string>("IdCountry")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<string>("ProvinceName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("StatusProvince")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("IdCountry");

                    b.ToTable("Provinces", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Businesses.Business", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(26)");

                    b.Property<string>("BusinessAttributeId")
                        .HasColumnType("character varying(26)");

                    b.Property<string>("BusinessName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("CompanyAddress")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateLastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Hosts")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("StatusBusiness")
                        .HasColumnType("integer");

                    b.Property<string>("Url")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("BusinessAttributeId");

                    b.ToTable("Businesses", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Businesses.BusinessPlan", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(26)");

                    b.Property<string>("BusinessId")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<int>("BusinessPlansStatus")
                        .HasColumnType("integer");

                    b.Property<long>("CountOfDay")
                        .HasColumnType("bigint");

                    b.Property<long>("CountOfUsers")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateLastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FinishDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PlanId")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PlanId");

                    b.ToTable("UsersPlans", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Contacts.Contact", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(26)");

                    b.Property<string>("BusinessId")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<string>("ContactGroupId")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<string>("ContactPhoneNumberId")
                        .HasColumnType("character varying(26)");

                    b.Property<int>("ContactStatus")
                        .HasColumnType("integer");

                    b.Property<string>("ContactsEmailAddressId")
                        .HasColumnType("character varying(26)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateLastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EmailId")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Job")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("MobileNumberId")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.HasKey("Id");

                    b.HasIndex("ContactGroupId");

                    b.HasIndex("ContactPhoneNumberId");

                    b.HasIndex("ContactsEmailAddressId");

                    b.ToTable("Contacts", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Contacts.ContactGroup", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(26)");

                    b.Property<string>("BusinessId")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<int>("ContactGroupStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateLastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("ContactGroups", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Contacts.ContactPhoneNumber", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(26)");

                    b.Property<int>("ContactPhoneNumberStatus")
                        .HasColumnType("integer");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateLastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PhoneNo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("PhoneType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("ContactPhoneNumbers", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Contacts.ContactsEmailAddress", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(26)");

                    b.Property<int>("ContactsEmailAddressStatus")
                        .HasColumnType("integer");

                    b.Property<string>("CustomersEmailAddrs")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateLastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("ContactsEmailAddress", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Customers.Customer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(26)");

                    b.Property<DateOnly?>("BirthDayDate")
                        .HasColumnType("date");

                    b.Property<int>("CustomerActivationStatus")
                        .HasColumnType("integer");

                    b.Property<string>("CustomerCategoryId")
                        .HasColumnType("character varying(26)");

                    b.Property<string>("CustomerMoarefId")
                        .HasColumnType("character varying(26)");

                    b.Property<byte[]>("CustomerPic")
                        .HasColumnType("bytea");

                    b.Property<int>("CustomerState")
                        .HasColumnType("integer");

                    b.Property<int>("CustomerStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateLastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<byte?>("Gender")
                        .HasColumnType("smallint");

                    b.Property<string>("IdCity")
                        .HasColumnType("character varying(26)");

                    b.Property<string>("IdUser")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("CustomerCategoryId");

                    b.HasIndex("IdCity");

                    b.HasIndex("IdUser");

                    b.ToTable("Customers", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Customers.CustomerActivity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(26)");

                    b.Property<string>("CustomerActivityDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("CustomerActivityName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<int>("CustomerActivityStatus")
                        .HasColumnType("integer");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateLastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("CustomerActivities", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Customers.CustomerAddress", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(26)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("CodePost")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateLastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("IdCustomer")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<string>("PhoneNo")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("StatusCustomersAddress")
                        .HasColumnType("integer");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("IdCustomer");

                    b.ToTable("CustomerAddresses", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Customers.CustomerCategory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(26)");

                    b.Property<string>("CustomerCategoryName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("CustomerCategoryStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateLastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CustomerCategories", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Customers.CustomerFeedback", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(26)");

                    b.Property<int>("BalancePoint")
                        .HasColumnType("integer");

                    b.Property<int>("CustomerFeedbackStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateLastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<string>("FeedbackName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Point")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("CustomerFeedbacks", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Customers.CustomerFeedbackHistory", b =>
                {
                    b.Property<string>("CustomerFeedbackHistoryId")
                        .HasColumnType("character varying(26)");

                    b.Property<string>("CustomerFeedbackId")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateLastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsActivePoint")
                        .HasColumnType("boolean");

                    b.HasKey("CustomerFeedbackHistoryId");

                    b.HasIndex("CustomerFeedbackId");

                    b.ToTable("CustomerFeedbackHistories", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Customers.CustomerRepresentativeHistory", b =>
                {
                    b.Property<string>("CustomerRepresentativeHistoryId")
                        .HasColumnType("character varying(26)");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<string>("CustomerRepresentativeTypeId")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateLastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("CustomerRepresentativeHistoryId");

                    b.HasIndex("CustomerRepresentativeTypeId");

                    b.ToTable("CustomerRepresentativeHistories", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Customers.CustomerRepresentativeType", b =>
                {
                    b.Property<string>("CustomerRepresentativeTypeId")
                        .HasColumnType("character varying(26)");

                    b.Property<int>("BalancePoint")
                        .HasColumnType("integer");

                    b.Property<int>("CustomerRepresentativeName")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateLastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<decimal>("Point")
                        .HasColumnType("numeric");

                    b.HasKey("CustomerRepresentativeTypeId");

                    b.ToTable("CustomerRepresentativeTypes", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Customers.CustomerSubmission", b =>
                {
                    b.Property<string>("CustomerSubmissionId")
                        .HasColumnType("character varying(26)");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateLastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FollowDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CustomerSubmissionId");

                    b.ToTable("CustomerSubmissions", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Customers.CustomersEmailAddress", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(26)");

                    b.Property<string>("CustomerEmailAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateLastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IdCustomer")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<int>("StatusCustomerEmailAddress")
                        .HasColumnType("integer");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("IdCustomer");

                    b.ToTable("EmailAddresses", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Customers.CustomersPhoneNumber", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(26)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateLastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IdCustomer")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<string>("PhoneNo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("PhoneType")
                        .HasColumnType("integer");

                    b.Property<int>("StatusCustomersPhoneNumber")
                        .HasColumnType("integer");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("IdCustomer");

                    b.ToTable("PhoneNumbers", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Customers.Foroosh.ForooshFactor", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(26)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateLastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("DiscountPrice")
                        .HasColumnType("numeric");

                    b.Property<string>("IdCustomer")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<string>("IdCustomerAddress")
                        .HasColumnType("character varying(26)");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PriceTotal")
                        .HasColumnType("numeric");

                    b.Property<int>("StatusForooshFactor")
                        .HasColumnType("integer");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("IdCustomer");

                    b.HasIndex("IdCustomerAddress");

                    b.ToTable("ForooshFactors", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Customers.Foroosh.ForooshOrder", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(26)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateLastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly>("DatePayment")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("IdForooshFactor")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<string>("IdProduct")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<int>("PaymentMethodType")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PriceDiscount")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PriceShipping")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PriceTotal")
                        .HasColumnType("numeric");

                    b.Property<int>("ShippingMethodType")
                        .HasColumnType("integer");

                    b.Property<int>("StatusForooshOrder")
                        .HasColumnType("integer");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("IdForooshFactor");

                    b.HasIndex("IdProduct");

                    b.ToTable("ForooshOrders", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Customers.Notes.CustomerNote", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(26)");

                    b.Property<int>("CustomerNoteStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateLastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdCustomer")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<string>("IdProduct")
                        .HasColumnType("character varying(26)");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("IdCustomer");

                    b.HasIndex("IdProduct");

                    b.ToTable("CustomerNotes", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Customers.Notes.CustomerNoteAttachment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(26)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateLastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Extenstion")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<byte[]>("FileName")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("IdCustomerNote")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<int>("NoteAttachmentStatus")
                        .HasColumnType("integer");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("IdCustomerNote");

                    b.ToTable("NoteAttachments", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Customers.Notes.CustomerNoteHashTable", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(26)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateLastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IdBusiness")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<int>("NoteHashTagStatus")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("IdBusiness");

                    b.ToTable("NoteHashTables", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Customers.Notes.CustomerNoteHashTag", b =>
                {
                    b.Property<string>("IdCustomerNote")
                        .HasColumnType("character varying(26)");

                    b.Property<string>("IdNoteHashTable")
                        .HasColumnType("character varying(26)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateLastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IdCustomerNoteNavigationId")
                        .HasColumnType("character varying(26)");

                    b.Property<int>("StatusNoteHashTag")
                        .HasColumnType("integer");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("IdCustomerNote", "IdNoteHashTable");

                    b.HasIndex("IdCustomerNoteNavigationId");

                    b.HasIndex("IdNoteHashTable");

                    b.ToTable("NoteHashTags", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Customers.PeyGiry.CustomerPeyGiry", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(26)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateLastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("IdCustomer")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<int>("StatusCustomerPeyGiry")
                        .HasColumnType("integer");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("IdCustomer");

                    b.ToTable("CustomerPeyGiries", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Customers.PeyGiry.PeyGiryAttachment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(26)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateLastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Extenstion")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<byte[]>("FileName")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("IdPeyGiry")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<int>("StatusPeyGiryAttachment")
                        .HasColumnType("integer");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("IdPeyGiry");

                    b.ToTable("PeyGiryAttachments", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Customers.ProductCustomerFavoritesList", b =>
                {
                    b.Property<string>("IdProduct")
                        .HasColumnType("character varying(26)");

                    b.Property<string>("IdCustomer")
                        .HasColumnType("character varying(26)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateLastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("StatusProductCustomerFavoritesList")
                        .HasColumnType("integer");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("IdProduct", "IdCustomer");

                    b.HasIndex("IdCustomer");

                    b.ToTable("ProductCustomerFavoritesLists", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Plans.Plan", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(26)");

                    b.Property<long>("CountOfDay")
                        .HasColumnType("bigint");

                    b.Property<long>("CountOfUsers")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateLastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("numeric");

                    b.Property<decimal>("FinalPrice")
                        .HasColumnType("numeric");

                    b.Property<string>("PlanName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("PlanStatus")
                        .HasColumnType("integer");

                    b.Property<decimal>("PriceOfDay")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PriceOfUsers")
                        .HasColumnType("numeric");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Plans", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Products.Product", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(26)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateLastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("Discount")
                        .IsRequired()
                        .HasColumnType("numeric");

                    b.Property<byte?>("DiscountPercent")
                        .IsRequired()
                        .HasColumnType("smallint");

                    b.Property<string>("IdProductCategory")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<byte[]>("Picture")
                        .HasColumnType("bytea");

                    b.Property<decimal?>("Price")
                        .IsRequired()
                        .HasColumnType("numeric");

                    b.Property<string>("ProductCategoryId")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<decimal?>("SecondaryPrice")
                        .IsRequired()
                        .HasColumnType("numeric");

                    b.Property<int>("StatusProduct")
                        .HasColumnType("integer");

                    b.Property<byte>("StatusPublish")
                        .HasColumnType("smallint");

                    b.Property<string>("Summery")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("ProductCategoryId");

                    b.ToTable("Products", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Products.ProductCategory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(26)");

                    b.Property<string>("BusinessId")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateLastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Icon")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<byte?>("Order")
                        .IsRequired()
                        .HasColumnType("smallint");

                    b.Property<string>("ProductCategoryName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("ProductCategoryStatus")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.ToTable("ProductCategories", (string)null);
                });

            modelBuilder.Entity("Domain.Models.SanAt", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(26)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateLastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SanAtName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<int>("SanAtStatus")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SanAts", (string)null);
                });

            modelBuilder.Entity("Domain.Models.SpecialFields.AttributeOption", b =>
                {
                    b.Property<string>("AttributeOptionsId")
                        .HasColumnType("character varying(26)");

                    b.Property<int>("AttributeOptionsStatus")
                        .HasColumnType("integer");

                    b.Property<string>("BusinessAttributeId")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<string>("BusinessId")
                        .HasColumnType("character varying(26)");

                    b.Property<string>("ColorSquaresRgb")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateLastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("AttributeOptionsId");

                    b.HasIndex("BusinessAttributeId");

                    b.ToTable("AttributeOptions", (string)null);
                });

            modelBuilder.Entity("Domain.Models.SpecialFields.AttributeOptionsValue", b =>
                {
                    b.Property<string>("AttributeOptionsValueId")
                        .HasColumnType("character varying(26)");

                    b.Property<string>("AttributeDescriptionValue")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("AttributeJsonValue")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("AttributeOptionId")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<int>("AttributeOptionsValueStatus")
                        .HasColumnType("integer");

                    b.Property<string>("AttributeXMLValue")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("BusinessId")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateLastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("FileId")
                        .HasColumnType("integer");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("ForCustomerId")
                        .HasColumnType("integer");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int?>("PictureId")
                        .HasColumnType("integer");

                    b.HasKey("AttributeOptionsValueId");

                    b.HasIndex("AttributeOptionId");

                    b.ToTable("AttributeOptionsValues", (string)null);
                });

            modelBuilder.Entity("Domain.Models.SpecialFields.BusinessAttribute", b =>
                {
                    b.Property<string>("BusinessAttributeId")
                        .HasColumnType("character varying(26)");

                    b.Property<int>("AttributeTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("BusinessAttributeStatus")
                        .HasColumnType("integer");

                    b.Property<string>("CategoryAttributeId")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<string>("ConditionValue")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateLastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DefaultValue")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("TextPrompt")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ValidationFileAllowExtention")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("ValidationFileMaximumSize")
                        .HasColumnType("integer");

                    b.Property<int?>("ValidationMaxLength")
                        .HasColumnType("integer");

                    b.Property<int?>("ValidationMinLength")
                        .HasColumnType("integer");

                    b.HasKey("BusinessAttributeId");

                    b.HasIndex("CategoryAttributeId");

                    b.ToTable("BusinessAttributes", (string)null);
                });

            modelBuilder.Entity("Domain.Models.SpecialFields.CategoryAttribute", b =>
                {
                    b.Property<string>("CategoryAttributeId")
                        .HasColumnType("character varying(26)");

                    b.Property<int>("CategoryAttributeStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateLastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("CategoryAttributeId");

                    b.ToTable("CategoryAttributes", (string)null);
                });

            modelBuilder.Entity("Domain.UnDifined.Log", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(26)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateLastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte>("Kind")
                        .HasColumnType("smallint");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Logs", (string)null);
                });

            modelBuilder.Entity("Domain.UnDifined.Setting", b =>
                {
                    b.Property<string>("SettingId")
                        .HasColumnType("character varying(26)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateLastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("SettingId");

                    b.ToTable("Settings", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Domain.Models.IdentityModels.User", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("Address")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("BusinessId")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<string>("CityId")
                        .HasColumnType("character varying(26)");

                    b.Property<string>("CodeMelli")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Family")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<byte?>("Flag")
                        .HasColumnType("smallint");

                    b.Property<byte?>("Gender")
                        .HasColumnType("smallint");

                    b.Property<string>("LastIp")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("LastLoginDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("Limited")
                        .HasColumnType("boolean");

                    b.Property<int?>("LoginCount")
                        .HasColumnType("integer");

                    b.Property<byte?>("Married")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("OtpPassword")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime?>("OtpPasswordExpired")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PostalCode")
                        .HasColumnType("text");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("UserStatus")
                        .HasColumnType("integer");

                    b.Property<string>("WebSite")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("User");
                });

            modelBuilder.Entity("Domain.Models.Address.City", b =>
                {
                    b.HasOne("Domain.Models.Address.Province", "IdProvinceNavigation")
                        .WithMany("Cities")
                        .HasForeignKey("IdProvince")
                        .IsRequired()
                        .HasConstraintName("FK_City_Province");

                    b.Navigation("IdProvinceNavigation");
                });

            modelBuilder.Entity("Domain.Models.Address.Province", b =>
                {
                    b.HasOne("Domain.Models.Address.Country", "IdCountryNavigation")
                        .WithMany("Provinces")
                        .HasForeignKey("IdCountry")
                        .IsRequired()
                        .HasConstraintName("FK_Province_Country");

                    b.Navigation("IdCountryNavigation");
                });

            modelBuilder.Entity("Domain.Models.Businesses.Business", b =>
                {
                    b.HasOne("Domain.Models.SpecialFields.BusinessAttribute", null)
                        .WithMany("Businesses")
                        .HasForeignKey("BusinessAttributeId");
                });

            modelBuilder.Entity("Domain.Models.Businesses.BusinessPlan", b =>
                {
                    b.HasOne("Domain.Models.Plans.Plan", null)
                        .WithMany("UsersPlans")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.Contacts.Contact", b =>
                {
                    b.HasOne("Domain.Models.Contacts.ContactGroup", null)
                        .WithMany("Contacts")
                        .HasForeignKey("ContactGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Contacts.ContactPhoneNumber", null)
                        .WithMany("Contacts")
                        .HasForeignKey("ContactPhoneNumberId");

                    b.HasOne("Domain.Models.Contacts.ContactsEmailAddress", null)
                        .WithMany("Contacts")
                        .HasForeignKey("ContactsEmailAddressId");
                });

            modelBuilder.Entity("Domain.Models.Customers.Customer", b =>
                {
                    b.HasOne("Domain.Models.Customers.CustomerCategory", null)
                        .WithMany("Customers")
                        .HasForeignKey("CustomerCategoryId");

                    b.HasOne("Domain.Models.Address.City", "IdCityNavigation")
                        .WithMany("Customers")
                        .HasForeignKey("IdCity")
                        .HasConstraintName("FK_Customer_City");

                    b.HasOne("Domain.Models.IdentityModels.User", "IdUserNavigation")
                        .WithMany("Customers")
                        .HasForeignKey("IdUser")
                        .IsRequired()
                        .HasConstraintName("FK_Customer_User");

                    b.Navigation("IdCityNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("Domain.Models.Customers.CustomerAddress", b =>
                {
                    b.HasOne("Domain.Models.Customers.Customer", "IdCustomerNavigation")
                        .WithMany("CustomerAddresses")
                        .HasForeignKey("IdCustomer")
                        .IsRequired()
                        .HasConstraintName("FK_CustomerAddresses_Customers");

                    b.Navigation("IdCustomerNavigation");
                });

            modelBuilder.Entity("Domain.Models.Customers.CustomerFeedbackHistory", b =>
                {
                    b.HasOne("Domain.Models.Customers.CustomerFeedback", null)
                        .WithMany("CustomerFeedbackHistories")
                        .HasForeignKey("CustomerFeedbackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.Customers.CustomerRepresentativeHistory", b =>
                {
                    b.HasOne("Domain.Models.Customers.CustomerRepresentativeType", null)
                        .WithMany("CustomerRepresentativeHistory")
                        .HasForeignKey("CustomerRepresentativeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.Customers.CustomersEmailAddress", b =>
                {
                    b.HasOne("Domain.Models.Customers.Customer", "IdCustomerNavigation")
                        .WithMany("EmailAddresses")
                        .HasForeignKey("IdCustomer")
                        .IsRequired()
                        .HasConstraintName("FK_CustomersEmailAddress_Customers");

                    b.Navigation("IdCustomerNavigation");
                });

            modelBuilder.Entity("Domain.Models.Customers.CustomersPhoneNumber", b =>
                {
                    b.HasOne("Domain.Models.Customers.Customer", "IdCustomerNavigation")
                        .WithMany("PhoneNumbers")
                        .HasForeignKey("IdCustomer")
                        .IsRequired()
                        .HasConstraintName("FK_CustomersPhoneNumber_Customers");

                    b.Navigation("IdCustomerNavigation");
                });

            modelBuilder.Entity("Domain.Models.Customers.Foroosh.ForooshFactor", b =>
                {
                    b.HasOne("Domain.Models.Customers.Customer", "IdCustomerNavigation")
                        .WithMany("ForooshFactors")
                        .HasForeignKey("IdCustomer")
                        .IsRequired()
                        .HasConstraintName("FK_ForooshFactor_Customers");

                    b.HasOne("Domain.Models.Customers.CustomerAddress", "IdCustomerAddressNavigation")
                        .WithMany("ForooshFactors")
                        .HasForeignKey("IdCustomerAddress")
                        .HasConstraintName("FK_ForooshFactor_CustomerAddress");

                    b.Navigation("IdCustomerAddressNavigation");

                    b.Navigation("IdCustomerNavigation");
                });

            modelBuilder.Entity("Domain.Models.Customers.Foroosh.ForooshOrder", b =>
                {
                    b.HasOne("Domain.Models.Customers.Foroosh.ForooshFactor", "IdForooshFactorNavigation")
                        .WithMany("ForooshOrders")
                        .HasForeignKey("IdForooshFactor")
                        .IsRequired()
                        .HasConstraintName("FK_ForooshOrder_Customers");

                    b.HasOne("Domain.Models.Products.Product", "IdProductNavigation")
                        .WithMany("ForooshOrders")
                        .HasForeignKey("IdProduct")
                        .IsRequired()
                        .HasConstraintName("FK_ForooshOrder_Product");

                    b.Navigation("IdForooshFactorNavigation");

                    b.Navigation("IdProductNavigation");
                });

            modelBuilder.Entity("Domain.Models.Customers.Notes.CustomerNote", b =>
                {
                    b.HasOne("Domain.Models.Customers.Customer", "IdCustomerNavigation")
                        .WithMany("CustomerNotes")
                        .HasForeignKey("IdCustomer")
                        .IsRequired()
                        .HasConstraintName("FK_CustomerNote_Customers");

                    b.HasOne("Domain.Models.Products.Product", "IdProductNavigation")
                        .WithMany("CustomerNotes")
                        .HasForeignKey("IdProduct")
                        .HasConstraintName("FK_CustomerNote_Product");

                    b.Navigation("IdCustomerNavigation");

                    b.Navigation("IdProductNavigation");
                });

            modelBuilder.Entity("Domain.Models.Customers.Notes.CustomerNoteAttachment", b =>
                {
                    b.HasOne("Domain.Models.Customers.Notes.CustomerNote", "IdCustomerNoteNavigation")
                        .WithMany("NoteAttachments")
                        .HasForeignKey("IdCustomerNote")
                        .IsRequired()
                        .HasConstraintName("FK_CustomerNoteAttachment_CustomerNote");

                    b.Navigation("IdCustomerNoteNavigation");
                });

            modelBuilder.Entity("Domain.Models.Customers.Notes.CustomerNoteHashTable", b =>
                {
                    b.HasOne("Domain.Models.Businesses.Business", "IdBusinessNavigation")
                        .WithMany("CustomerNoteHashTables")
                        .HasForeignKey("IdBusiness")
                        .IsRequired()
                        .HasConstraintName("FK_CustomersEmailAddress_Business");

                    b.Navigation("IdBusinessNavigation");
                });

            modelBuilder.Entity("Domain.Models.Customers.Notes.CustomerNoteHashTag", b =>
                {
                    b.HasOne("Domain.Models.Customers.Notes.CustomerNote", "IdCustomerNoteNavigation")
                        .WithMany("NoteHashTags")
                        .HasForeignKey("IdCustomerNoteNavigationId");

                    b.HasOne("Domain.Models.Customers.Notes.CustomerNoteHashTable", "IdNoteHashTableNavigation")
                        .WithMany("CustomerNoteHashTags")
                        .HasForeignKey("IdNoteHashTable")
                        .IsRequired()
                        .HasConstraintName("FK_CustomerNoteHashTag_CustomerNoteHashTable");

                    b.Navigation("IdCustomerNoteNavigation");

                    b.Navigation("IdNoteHashTableNavigation");
                });

            modelBuilder.Entity("Domain.Models.Customers.PeyGiry.CustomerPeyGiry", b =>
                {
                    b.HasOne("Domain.Models.Customers.Customer", "IdCustomerNavigation")
                        .WithMany("CustomerPeyGiries")
                        .HasForeignKey("IdCustomer")
                        .IsRequired()
                        .HasConstraintName("FK_CustomerPeyGiry_Customers");

                    b.Navigation("IdCustomerNavigation");
                });

            modelBuilder.Entity("Domain.Models.Customers.PeyGiry.PeyGiryAttachment", b =>
                {
                    b.HasOne("Domain.Models.Customers.PeyGiry.CustomerPeyGiry", "IdCustomerPeyGiryNavigation")
                        .WithMany("PeyGiryAttachments")
                        .HasForeignKey("IdPeyGiry")
                        .IsRequired()
                        .HasConstraintName("FK_PeyGiryAttachment_PeyGiry");

                    b.Navigation("IdCustomerPeyGiryNavigation");
                });

            modelBuilder.Entity("Domain.Models.Customers.ProductCustomerFavoritesList", b =>
                {
                    b.HasOne("Domain.Models.Customers.Customer", "IdCustomerNavigation")
                        .WithMany("FavoritesLists")
                        .HasForeignKey("IdCustomer")
                        .IsRequired()
                        .HasConstraintName("FK_ProductCustomerFavoritesList_Customers");

                    b.HasOne("Domain.Models.Products.Product", "IdProductNavigation")
                        .WithMany("FavoritesLists")
                        .HasForeignKey("IdProduct")
                        .IsRequired()
                        .HasConstraintName("FK_ProductCustomerFavoritesList_Products");

                    b.Navigation("IdCustomerNavigation");

                    b.Navigation("IdProductNavigation");
                });

            modelBuilder.Entity("Domain.Models.Products.Product", b =>
                {
                    b.HasOne("Domain.Models.Products.ProductCategory", "ProductCategory")
                        .WithMany()
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("Domain.Models.Products.ProductCategory", b =>
                {
                    b.HasOne("Domain.Models.Businesses.Business", "Business")
                        .WithMany()
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Business");
                });

            modelBuilder.Entity("Domain.Models.SpecialFields.AttributeOption", b =>
                {
                    b.HasOne("Domain.Models.SpecialFields.BusinessAttribute", null)
                        .WithMany("AttributeOptions")
                        .HasForeignKey("BusinessAttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.SpecialFields.AttributeOptionsValue", b =>
                {
                    b.HasOne("Domain.Models.SpecialFields.AttributeOption", null)
                        .WithMany("AttributeOptionsValues")
                        .HasForeignKey("AttributeOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.SpecialFields.BusinessAttribute", b =>
                {
                    b.HasOne("Domain.Models.SpecialFields.CategoryAttribute", null)
                        .WithMany("BusinessAttributes")
                        .HasForeignKey("CategoryAttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.UnDifined.Log", b =>
                {
                    b.HasOne("Domain.Models.IdentityModels.User", "User")
                        .WithMany("Logs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.Address.City", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("Domain.Models.Address.Country", b =>
                {
                    b.Navigation("Provinces");
                });

            modelBuilder.Entity("Domain.Models.Address.Province", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("Domain.Models.Businesses.Business", b =>
                {
                    b.Navigation("CustomerNoteHashTables");
                });

            modelBuilder.Entity("Domain.Models.Contacts.ContactGroup", b =>
                {
                    b.Navigation("Contacts");
                });

            modelBuilder.Entity("Domain.Models.Contacts.ContactPhoneNumber", b =>
                {
                    b.Navigation("Contacts");
                });

            modelBuilder.Entity("Domain.Models.Contacts.ContactsEmailAddress", b =>
                {
                    b.Navigation("Contacts");
                });

            modelBuilder.Entity("Domain.Models.Customers.Customer", b =>
                {
                    b.Navigation("CustomerAddresses");

                    b.Navigation("CustomerNotes");

                    b.Navigation("CustomerPeyGiries");

                    b.Navigation("EmailAddresses");

                    b.Navigation("FavoritesLists");

                    b.Navigation("ForooshFactors");

                    b.Navigation("PhoneNumbers");
                });

            modelBuilder.Entity("Domain.Models.Customers.CustomerAddress", b =>
                {
                    b.Navigation("ForooshFactors");
                });

            modelBuilder.Entity("Domain.Models.Customers.CustomerCategory", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("Domain.Models.Customers.CustomerFeedback", b =>
                {
                    b.Navigation("CustomerFeedbackHistories");
                });

            modelBuilder.Entity("Domain.Models.Customers.CustomerRepresentativeType", b =>
                {
                    b.Navigation("CustomerRepresentativeHistory");
                });

            modelBuilder.Entity("Domain.Models.Customers.Foroosh.ForooshFactor", b =>
                {
                    b.Navigation("ForooshOrders");
                });

            modelBuilder.Entity("Domain.Models.Customers.Notes.CustomerNote", b =>
                {
                    b.Navigation("NoteAttachments");

                    b.Navigation("NoteHashTags");
                });

            modelBuilder.Entity("Domain.Models.Customers.Notes.CustomerNoteHashTable", b =>
                {
                    b.Navigation("CustomerNoteHashTags");
                });

            modelBuilder.Entity("Domain.Models.Customers.PeyGiry.CustomerPeyGiry", b =>
                {
                    b.Navigation("PeyGiryAttachments");
                });

            modelBuilder.Entity("Domain.Models.Plans.Plan", b =>
                {
                    b.Navigation("UsersPlans");
                });

            modelBuilder.Entity("Domain.Models.Products.Product", b =>
                {
                    b.Navigation("CustomerNotes");

                    b.Navigation("FavoritesLists");

                    b.Navigation("ForooshOrders");
                });

            modelBuilder.Entity("Domain.Models.SpecialFields.AttributeOption", b =>
                {
                    b.Navigation("AttributeOptionsValues");
                });

            modelBuilder.Entity("Domain.Models.SpecialFields.BusinessAttribute", b =>
                {
                    b.Navigation("AttributeOptions");

                    b.Navigation("Businesses");
                });

            modelBuilder.Entity("Domain.Models.SpecialFields.CategoryAttribute", b =>
                {
                    b.Navigation("BusinessAttributes");
                });

            modelBuilder.Entity("Domain.Models.IdentityModels.User", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("Logs");
                });
#pragma warning restore 612, 618
        }
    }
}
